generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model Post {
  id         String       @id @default(cuid())
  title      String
  content    String
  image      String
  comments   Comment[]
  author     User         @relation(fields: [authorId], references: [id])
  authorId   String
  Suggestion Suggestion[]
}

model Comment {
  id       String  @id @default(cuid())
  author   User    @relation(fields: [authorId], references: [id])
  content  String
  post     Post   @relation(fields: [postId], references: [id])
  postId   String
  authorId String
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  role                  UserRole               @default(USER)
  image                 String?
  password              String?
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConformation TwoFactorConformation?
  posts                 Post[]
  comments              Comment[]
  suggestions           Suggestion[]
}

model Suggestion {
  id        String  @id @default(cuid())
  post      Post    @relation(fields: [postId], references: [id])
  published Boolean @default(false)
  User      User   @relation(fields: [userId], references: [id])
  userId    String
  postId    String
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model VerifactionToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model ResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConformation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
